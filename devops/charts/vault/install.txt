# install Hashicorp vault
```
helm -n vault install vault . -f values-staging.yaml --create-namespace
```

# Initializing the instance
```
~ kubectl -n vault exec -ti vault-server-0 -- vault operator init

Unseal Key 1: u7VmJQSYlycTcK3UmeAGctJxvEww4AAQu7pRZq5WUt64
Unseal Key 2: IKkoXOQ3OTCdc9nQpIzDDxK3s+bh0SLF77aa20tj6wuC
Unseal Key 3: SLoUhz5MCWtetYDVX1N8BT/rGbpvCAap4iKwpiQOJKuM
Unseal Key 4: TfPC3ERxxngwEicijXCFabnqup1OPSNxTd9Tnd30LmZB
Unseal Key 5: WETBbRss2WrS1ggP4CxYqyGB0R7BIVQw8aszy6hk0+XB

Initial Root Token: hvs.xD3rB9HzxSybxcBSTXgcHLTP

Vault initialized with 5 key shares and a key threshold of 3. Please securely
distribute the key shares printed above. When the Vault is re-sealed,
restarted, or stopped, you must supply at least 3 of these keys to unseal it
before it can start servicing requests.

Vault does not store the generated root key. Without at least 3 keys to
reconstruct the root key, Vault will remain permanently sealed!

It is possible to generate new unseal keys, provided you have a quorum of
existing unseal keys shares. See "vault operator rekey" for more information.
```



# Unseal the first vault server until it reaches the key threshold (3times)
```
kubectl -n vault exec -ti vault-server-0 -- vault operator unseal

````


# install External Secrets Operator : The operator reads information from external APIs and automatically injects the values into a Kubernetes Secret.
# External Secrets Operator is a Kubernetes operator that integrates external secret management systems like AWS Secrets Manager, HashiCorp Vault, Google Secrets Manager, Azure Key Vault and many more. 
```
cd ../external-secrets
helm -n vault install external-secrets . -f values-staging.yaml
```

# Create SecretStore:  The ExternalSecret specifies what to fetch, the SecretStore specifies how to access.
```
kubectl -n apps apply -f secretStore.yaml

```



Plan
-----
1. In HashCorp Vault secrets:
- kv/
---- api-staging/
---- api-prod/

2. In apps
namespaces:
-----------
- staging
- prod


3. 
